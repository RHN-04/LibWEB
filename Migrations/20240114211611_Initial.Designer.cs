// <auto-generated />
using System;
using LibWEB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibWEB.Migrations
{
    [DbContext(typeof(LibContext))]
    [Migration("20240114211611_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("LibWEB.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Patronymic")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Country")
                        .HasColumnType("int")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Country" }, "country");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.AuthorPrintPublishing", b =>
                {
                    b.Property<int?>("Author")
                        .HasColumnType("int")
                        .HasColumnName("author");

                    b.Property<int>("PrintPublishing")
                        .HasColumnType("int")
                        .HasColumnName("print_publishing");

                    b.HasKey("Author", "PrintPublishing");

                    b.HasIndex(new[] { "Author" }, "author");

                    b.HasIndex(new[] { "PrintPublishing" }, "print_publishing");

                    b.ToTable("author_print_publishing", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country_name");

                    b.HasKey("Id");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("NameGenre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name_genre");

                    b.HasKey("Id");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.GenrePrintPublishing", b =>
                {
                    b.Property<int>("Genre")
                        .HasColumnType("int")
                        .HasColumnName("genre");

                    b.Property<int>("PrintPublishing")
                        .HasColumnType("int")
                        .HasColumnName("print_publishing");

                    b.HasKey("Genre", "PrintPublishing");

                    b.HasIndex(new[] { "Genre" }, "genre");

                    b.HasIndex(new[] { "PrintPublishing" }, "print_publishing")
                        .HasDatabaseName("print_publishing1");

                    b.ToTable("genre_print_publishing", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Giving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("GivingDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("giving_date");

                    b.Property<int>("PrintPublishing")
                        .HasColumnType("int")
                        .HasColumnName("print_publishing");

                    b.Property<int>("Reader")
                        .HasColumnType("int")
                        .HasColumnName("reader");

                    b.Property<DateTime?>("ReceivingDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receiving_date");

                    b.Property<DateTime?>("ReceivingDeadlineDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receiving_deadline_date");

                    b.HasKey("Id");

                    b.HasIndex("PrintPublishing");

                    b.HasIndex(new[] { "Reader" }, "reader");

                    b.ToTable("giving", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Preorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("GivingDeadlineDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("giving_deadline_date");

                    b.Property<int>("PrintPublishing")
                        .HasColumnType("int")
                        .HasColumnName("print_publishing");

                    b.Property<int>("Reader")
                        .HasColumnType("int")
                        .HasColumnName("reader");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('created','done','archived')")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PrintPublishing");

                    b.HasIndex(new[] { "Reader" }, "reader")
                        .HasDatabaseName("reader1");

                    b.ToTable("preorder", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.PrintPublishing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AgeRestriction")
                        .HasColumnType("int")
                        .HasColumnName("age_restriction");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageId")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Numbers")
                        .HasColumnType("int")
                        .HasColumnName("numbers");

                    b.Property<int>("YearOfPublishing")
                        .HasColumnType("int")
                        .HasColumnName("year_of_publishing");

                    b.HasKey("Id");

                    b.ToTable("print_publishing", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("reader", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibWEB.Models.Author", b =>
                {
                    b.HasOne("LibWEB.Models.Country", "CountryNavigation")
                        .WithMany("Authors")
                        .HasForeignKey("Country")
                        .IsRequired()
                        .HasConstraintName("author_ibfk_1");

                    b.Navigation("CountryNavigation");
                });

            modelBuilder.Entity("LibWEB.Models.AuthorPrintPublishing", b =>
                {
                    b.HasOne("LibWEB.Models.Author", "AuthorNavigation")
                        .WithMany()
                        .HasForeignKey("Author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("author_print_publishing_ibfk_1");

                    b.HasOne("LibWEB.Models.PrintPublishing", "PrintPublishingNavigation")
                        .WithMany()
                        .HasForeignKey("PrintPublishing")
                        .IsRequired()
                        .HasConstraintName("author_print_publishing_ibfk_2");

                    b.Navigation("AuthorNavigation");

                    b.Navigation("PrintPublishingNavigation");
                });

            modelBuilder.Entity("LibWEB.Models.GenrePrintPublishing", b =>
                {
                    b.HasOne("LibWEB.Models.Genre", "GenreNavigation")
                        .WithMany()
                        .HasForeignKey("Genre")
                        .IsRequired()
                        .HasConstraintName("genre_print_publishing_ibfk_1");

                    b.HasOne("LibWEB.Models.PrintPublishing", "PrintPublishingNavigation")
                        .WithMany()
                        .HasForeignKey("PrintPublishing")
                        .IsRequired()
                        .HasConstraintName("genre_print_publishing_ibfk_2");

                    b.Navigation("GenreNavigation");

                    b.Navigation("PrintPublishingNavigation");
                });

            modelBuilder.Entity("LibWEB.Models.Giving", b =>
                {
                    b.HasOne("LibWEB.Models.PrintPublishing", "PrintPublishingNavigation")
                        .WithMany()
                        .HasForeignKey("PrintPublishing")
                        .IsRequired()
                        .HasConstraintName("fk_print_publishing");

                    b.HasOne("LibWEB.Models.Reader", "ReaderNavigation")
                        .WithMany("Givings")
                        .HasForeignKey("Reader")
                        .IsRequired()
                        .HasConstraintName("giving_ibfk_1");

                    b.Navigation("PrintPublishingNavigation");

                    b.Navigation("ReaderNavigation");
                });

            modelBuilder.Entity("LibWEB.Models.Preorder", b =>
                {
                    b.HasOne("LibWEB.Models.PrintPublishing", "PrintPublishingNavigation")
                        .WithMany()
                        .HasForeignKey("PrintPublishing")
                        .IsRequired()
                        .HasConstraintName("fk_print_publishing_1");

                    b.HasOne("LibWEB.Models.Reader", "ReaderNavigation")
                        .WithMany("Preorders")
                        .HasForeignKey("Reader")
                        .IsRequired()
                        .HasConstraintName("preorder_ibfk_1");

                    b.Navigation("PrintPublishingNavigation");

                    b.Navigation("ReaderNavigation");
                });

            modelBuilder.Entity("LibWEB.Models.Country", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("LibWEB.Models.Reader", b =>
                {
                    b.Navigation("Givings");

                    b.Navigation("Preorders");
                });
#pragma warning restore 612, 618
        }
    }
}
